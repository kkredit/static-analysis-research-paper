Flawfinder version 1.31, (C) 2001-2014 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 169
Examining ./example.c

FINAL RESULTS:

./example.c:6:  [5] (buffer) gets:
  Does not check for buffer overflows (CWE-120, CWE-20). Use fgets() instead.
./example.c:5:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119:CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.
./example.c:7:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range
  (CWE-190). If source untrusted, check both minimum and maximum, even if the
  input had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended).

ANALYSIS SUMMARY:

Hits = 3
Lines analyzed = 21 in approximately 0.01 seconds (1619 lines/second)
Physical Source Lines of Code (SLOC) = 16
Hits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   1
Hits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   1 [4+]   1 [5+]   1
Hits/KSLOC@level+ = [0+] 187.5 [1+] 187.5 [2+] 187.5 [3+] 62.5 [4+] 62.5 [5+] 62.5
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming for Linux and Unix HOWTO'
(http://www.dwheeler.com/secure-programs) for more information.
